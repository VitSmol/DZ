service: serverless-rest-api-with-dynamodb

provider:
  name: aws
  stage: dev
  region: local
  runtime: nodejs16.x
  environment:
    DYNAMODB_TABLE: test
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
plugins:
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true # create tables on start  
functions:
  create:
    handler: router.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: router.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: router.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: router.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: router.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: test